{
  "name": "analysis bot",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b02088d-148a-4db4-9bbe-2f4ad2250ba8",
              "leftValue": "={{ !['HIMS.US'].includes($('loop_over_tickers').item.json.ticker) }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2160,
        2272
      ],
      "id": "9a78452b-35af-47e1-9884-d9193c881f05",
      "name": "Filter Excluded Tickers"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "da822abf-21c2-4b63-aa0b-24e7dc288242",
      "name": "loop_over_tickers",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -2320,
        2272
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "770d6272-1cde-44d7-9e15-fe5d7c28ba36",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $ifEmpty($input.all().toJsonString(),'True') }}",
              "rightValue": "True"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "55d3a19d-23cf-494e-b43e-e9458eedeb3f",
      "name": "If_ticker_not_valid",
      "type": "n8n-nodes-base.if",
      "position": [
        -1872,
        2272
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 705623934,
          "mode": "list",
          "cachedResultName": "invalid",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit#gid=705623934"
        },
        "columns": {
          "value": {
            "date": "={{$today}}\n",
            "stock": "={{ $('loop_over_tickers').item.json.ticker }}",
            "sentimentScore": "Excluded Ticker"
          },
          "schema": [
            {
              "id": "date",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "date",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "stock",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "sentimentScore",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "sentimentScore",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "rational",
              "type": "string",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "rational",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "eee00178-28ca-4b77-ab3e-33a1c15a98ab",
      "name": "Write_in_google_sheets_invalid_ticker",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -1648,
        2016
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- n8n Code Node (JavaScript) ---\n// This script handles JSON data that's already in array format\n\n// Check if the input is already a JSON array or individual items\nlet allArticlesArray;\n\nif (Array.isArray(items[0].json)) {\n  // If the first item contains an array, use it directly\n  allArticlesArray = items[0].json;\n} else if (items[0].json.fullString) {\n  // If there's a fullString property, parse it\n  allArticlesArray = JSON.parse(items[0].json.fullString);\n} else {\n  // Otherwise, extract JSON data from all incoming n8n items\n  allArticlesArray = items.map(item => item.json);\n}\n\n// Convert the entire array into a single JSON string\n// The 'null, 2' arguments format the string with indentation for readability\nconst combinedString = JSON.stringify(allArticlesArray, null, 2);\n\n// Return the result as a single item\n// The output will have one property, 'fullString', containing the combined text\nreturn [\n  {\n    json: {\n      fullString: combinedString,\n      articleCount: allArticlesArray.length,\n      sampleArticle: allArticlesArray[0] || null\n    }\n  }\n];"
      },
      "id": "9ad92e80-6bf7-4318-bf21-1a75758c6bf4",
      "name": "join_articles_into_1",
      "type": "n8n-nodes-base.code",
      "position": [
        -1632,
        2272
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a stock sentiment analyzer. Your task is to evaluate news content for their potential impact on a specific stock.\n\nInput Format:\n    User input is in the following format:\n        Symbol: (The stock symbol also called ticker symbol)\n        title: (News headline that you have to analyze for sentiment of the given stock)\ncontent:(the content of the news to analyze)\nAnalysis Guidelines:\n    Evaluate how the news might affect the price of only the stock specified by the user in the input and generate a sentiment score between -1 and 1.\n    A score close to -1 indicates a strong negative impact, suggesting the news could significantly drive the stock price down.\n    A score near 0 represents a neutral impact, implying little to no effect on the stock price.\n    Conversely, a score close to 1 reflects a strong positive impact, likely driving the stock price up.\n    When generating the score, consider whether the news is surprising i.e., if it contains new information - or already priced in.\n    Explain in detail the rationale behind the score, highlighting why the news is positive, negative, or neutral for the given stock's price.\nOutput Format:\n    Return the result as JSON in the following format:\n\n        { symbol: (The stock symbol also called ticker symbol),\"sentiment_score\": (The sentiment score - float between -1 and 1), \"rationale\": (Your explanation for the score)}\nProvide the JSON output only. Do not include any other text.\n\nReal stock Symbol:\n{{$('loop_over_tickers').all()[0].json.ticker}}\n{{ $('join_articles_into_1').all()[0].json.fullString }}",
        "options": {}
      },
      "id": "15495283-cb71-4edf-809a-797c23a863af",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -1456,
        2272
      ],
      "executeOnce": false,
      "typeVersion": 2,
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 3000
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.0-flash",
        "options": {
          "maxOutputTokens": 2048
        }
      },
      "id": "962bbc4b-8345-4356-a2d2-3b8639458f1e",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        -1456,
        2528
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "cPK0ezlgYDg88aZm",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n// The input is an array of items. We'll work with the first item.\n\n\n// Access the string value from the 'output' field in the input JSON.\nconst rawStringWithMarkdown = item.json.output;\nconsole.log(item.json.output)\n// The JSON we want is nested inside a markdown code block (```json ... ```).\n// We need to extract just the JSON part.\n\n// Find the first occurrence of '{' to locate the start of the JSON object.\nconst jsonStartIndex = rawStringWithMarkdown.indexOf('{');\n\n// Find the last occurrence of '}' to locate the end of the JSON object.\nconst jsonEndIndex = rawStringWithMarkdown.lastIndexOf('}');\n\n// Slice the string from the start to the end to get only the clean JSON string.\n// We add +1 to jsonEndIndex because substring's second argument is exclusive.\nconst cleanJsonString = rawStringWithMarkdown.substring(jsonStartIndex, jsonEndIndex + 1);\n\n// Parse the cleaned string into a proper, usable JSON object.\nconst parsedJson = JSON.parse(cleanJsonString);\n\n// Return the parsed JSON object. The keys (symbol, sentiment_score, etc.)\n// will become individual fields in the n8n output for the next node to use.\nreturn parsedJson;}\n\n"
      },
      "id": "80d282fb-bb95-45c2-a073-b53592361d6c",
      "name": "format_output_as_json",
      "type": "n8n-nodes-base.code",
      "position": [
        -1104,
        2272
      ],
      "executeOnce": false,
      "retryOnFail": false,
      "typeVersion": 2,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "770d6272-1cde-44d7-9e15-fe5d7c28ba36",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": "True"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c34279aa-380a-4442-b623-6c16d98e625b",
      "name": "if_format_succesful",
      "type": "n8n-nodes-base.if",
      "position": [
        -928,
        2272
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "sentiment_data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "date": "={{$today}}",
            "ticker": "={{$('loop_over_tickers').all()[0].json.ticker.replace(\".US\",\"\")}}",
            "sentiment_score": "={{ $json.sentiment_score }}",
            "source": "={{ $json.rationale }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ticker",
              "displayName": "ticker",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment_score",
              "displayName": "sentiment_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "a3bef441-6ae0-41a0-8ad9-6301fcc64454",
      "name": "write_sentiment_to_sheets",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -688,
        2272
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/news?category=general&token=d2830t1r01qr2iaudvj0d2830t1r01qr2iaudvjg",
        "options": {}
      },
      "id": "7ccc0307-18b3-4d79-af3b-63dc047d9150",
      "name": "Get articles from Finnhub1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2016,
        2272
      ],
      "executeOnce": false,
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "id": "7bd5056e-f25f-4f02-a2c5-6437ba63c788",
      "name": "Schedule Trigger - Morning",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3696,
        2336
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "// TICKER LIST GENERATOR - Creates array of tickers to loop through\nconst popularTickers = [\n  'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX',\n  'JPM', 'JNJ', 'V', 'PG', 'UNH', 'HD', 'MA', 'BAC', 'ABBV', 'ADBE',\n  'CRM', 'KO', 'PFE', 'PEP', 'WMT', 'DIS', 'CSCO', 'VZ', 'INTC',\n  'NKE', 'MRK', 'T', 'ORCL', 'CVX', 'XOM', 'LLY', 'TMO', 'COST'\n];\n\n// Take only first 10 to respect rate limits (adjust as needed)\nconst tickerList = popularTickers.slice(0, 10);\n\nconsole.log(`Generated ticker list with ${tickerList.length} tickers:`, tickerList.join(', '));\n\n// Return the array that will be used by the loop\nreturn [{ json: { tickerArray: tickerList } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3488,
        2336
      ],
      "id": "5d851cec-15b4-4fa5-9048-ce0ceaa09721",
      "name": "Generate Ticker List1"
    },
    {
      "parameters": {
        "jsCode": "// Split ticker array into individual items for the loop\nconst tickerArray = $input.first().json.tickerArray;\n\nconst items = tickerArray.map((ticker, index) => ({\n  json: {\n    ticker: ticker,\n    index: index,\n    totalTickers: tickerArray.length\n  }\n}));\n\nconsole.log(`Split into ${items.length} individual ticker items for loop processing`);\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3296,
        2336
      ],
      "id": "55e3aa13-41da-4e69-9e96-a8ae444b1283",
      "name": "Split Into Individual Items1"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "fcf1c8ff-8ac8-43b4-b69c-ca1edb8e23bf",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3104,
        2336
      ]
    },
    {
      "parameters": {
        "url": "=https://api.polygon.io/v3/reference/tickers/{{ $json.ticker }}?apikey=42HARgwdvvWJUfqzEVFWw8T6Whi5_aaz",
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2736,
        2336
      ],
      "id": "7dc2096f-bb8f-4a17-9e07-c2d616c70fa5",
      "name": "Fetch Single Ticker1"
    },
    {
      "parameters": {
        "jsCode": "// Process individual ticker response from Polygon.io - n8n Compatible\ntry {\n  // Safely get input data with fallbacks\n  const inputData = $input?.first()?.json || {};\n  const currentItem = $node[\"Loop Over Items1\"]?.json || {};\n  const originalTicker = currentItem.ticker || 'UNKNOWN';\n  \n  console.log('Processing ticker ' + (currentItem.index + 1) + '/' + currentItem.totalTickers + ': ' + originalTicker);\n\n  // Check if ticker is empty, null, or invalid\n  if (!originalTicker || originalTicker.trim() === '' || originalTicker === 'N/A' || originalTicker === 'NULL') {\n    console.log('❌ Invalid ticker detected: ' + originalTicker);\n    return [{\n      json: {\n        ticker: originalTicker || 'EMPTY',\n        index: currentItem.index || 0,\n        processed: true,\n        timestamp: new Date().toISOString(),\n        source: 'invalid_ticker',\n        error: 'Empty or invalid ticker',\n        isValid: false,\n        name: null,\n        description: null,\n        market: null,\n        locale: null,\n        primary_exchange: null,\n        type: null,\n        active: null,\n        currency_name: null,\n        cik: null,\n        composite_figi: null,\n        share_class_figi: null\n      }\n    }];\n  }\n\n  // Initialize result object with all possible fields\n  let result = {\n    ticker: originalTicker,\n    index: currentItem.index || 0,\n    processed: true,\n    timestamp: new Date().toISOString(),\n    source: 'unknown',\n    error: null,\n    isValid: true,\n    name: null,\n    description: null,\n    market: null,\n    locale: null,\n    primary_exchange: null,\n    type: null,\n    active: null,\n    currency_name: null,\n    cik: null,\n    composite_figi: null,\n    share_class_figi: null\n  };\n\n  // Check if we got a successful response\n  if (inputData && inputData.results && typeof inputData.results === 'object') {\n    const tickerData = inputData.results;\n    \n    // Safely check if ticker matches (handle case where ticker might not exist)\n    if (tickerData.ticker || tickerData.name) {\n      console.log('✅ Successfully processed ticker: ' + originalTicker);\n      \n      // Manual property assignment with safe access\n      result.name = (typeof tickerData.name === 'string' && tickerData.name.trim()) ? tickerData.name : (originalTicker + ' Corporation');\n      result.description = (typeof tickerData.description === 'string' && tickerData.description.trim()) ? tickerData.description : null;\n      result.market = (typeof tickerData.market === 'string' && tickerData.market.trim()) ? tickerData.market : 'stocks';\n      result.locale = (typeof tickerData.locale === 'string' && tickerData.locale.trim()) ? tickerData.locale : 'us';\n      result.primary_exchange = (typeof tickerData.primary_exchange === 'string' && tickerData.primary_exchange.trim()) ? tickerData.primary_exchange : null;\n      result.type = (typeof tickerData.type === 'string' && tickerData.type.trim()) ? tickerData.type : null;\n      result.active = (tickerData.active !== undefined && tickerData.active !== null) ? Boolean(tickerData.active) : true;\n      result.currency_name = (typeof tickerData.currency_name === 'string' && tickerData.currency_name.trim()) ? tickerData.currency_name : 'usd';\n      result.cik = (typeof tickerData.cik === 'string' && tickerData.cik.trim()) ? tickerData.cik : null;\n      result.composite_figi = (typeof tickerData.composite_figi === 'string' && tickerData.composite_figi.trim()) ? tickerData.composite_figi : null;\n      result.share_class_figi = (typeof tickerData.share_class_figi === 'string' && tickerData.share_class_figi.trim()) ? tickerData.share_class_figi : null;\n      result.source = 'polygon_api_success';\n      \n    } else {\n      // Results exist but no ticker data\n      console.log('⚠️ Results found but no ticker data for: ' + originalTicker);\n      result.error = 'No ticker data in results';\n      result.source = 'polygon_api_no_ticker';\n      result.isValid = false;\n    }\n    \n  } else if (inputData && (inputData.error || (inputData.status && inputData.status >= 400))) {\n    // Handle API errors - mark as invalid\n    const errorMsg = inputData.error || ('HTTP ' + inputData.status) || 'Unknown API error';\n    console.log('❌ API error for ticker ' + originalTicker + ': ' + errorMsg);\n    \n    result.error = errorMsg;\n    result.source = 'polygon_api_error';\n    result.isValid = false;\n    \n  } else if (!inputData || Object.keys(inputData).length === 0) {\n    // Handle empty response\n    console.log('❌ Empty response for ticker ' + originalTicker);\n    \n    result.error = 'Empty API response';\n    result.source = 'polygon_api_empty';\n    result.isValid = false;\n    \n  } else {\n    // Handle unexpected response format - mark as invalid\n    console.log('⚠️ Unexpected response for ticker ' + originalTicker);\n    console.log('Response structure:', JSON.stringify(Object.keys(inputData)));\n    \n    result.error = 'Unexpected response format';\n    result.source = 'polygon_api_unexpected';\n    result.isValid = false;\n  }\n\n  // Always return a valid result\n  return [{ json: result }];\n\n} catch (error) {\n  // Catch any unexpected errors\n  console.log('🚨 Critical error processing ticker:', error.message);\n  \n  return [{\n    json: {\n      ticker: 'ERROR',\n      index: 0,\n      processed: true,\n      timestamp: new Date().toISOString(),\n      source: 'code_error',\n      error: 'Critical processing error: ' + error.message,\n      isValid: false,\n      name: null,\n      description: null,\n      market: null,\n      locale: null,\n      primary_exchange: null,\n      type: null,\n      active: null,\n      currency_name: null,\n      cik: null,\n      composite_figi: null,\n      share_class_figi: null\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        2336
      ],
      "id": "063b95c5-da27-4063-8d9c-d3e273504002",
      "name": "Process Single Response1"
    },
    {
      "parameters": {
        "jsCode": "// Final aggregation - ONLY process valid ticker results\nconst allItems = $input.all();\n\nconst processedTickers = allItems\n  .map(item => item.json)\n  .filter(ticker => ticker.processed === true)\n  .sort((a, b) => a.index - b.index); // Sort by original order\n\n// Filter out invalid tickers for the main results\nconst validTickers = processedTickers.filter(ticker => ticker.isValid === true);\nconst invalidTickers = processedTickers.filter(ticker => ticker.isValid === false);\n\nconst summary = {\n  total_processed: processedTickers.length,\n  valid_tickers_count: validTickers.length,\n  invalid_tickers_count: invalidTickers.length,\n  successful_api_calls: processedTickers.filter(t => t.source === 'polygon_api_success').length,\n  api_errors: processedTickers.filter(t => t.source.includes('error')).length,\n  unexpected_responses: processedTickers.filter(t => t.source.includes('unexpected')).length,\n  invalid_ticker_entries: processedTickers.filter(t => t.source === 'invalid_ticker').length,\n  processing_started_at: processedTickers[0]?.timestamp || new Date().toISOString(),\n  processing_completed_at: new Date().toISOString(),\n  successful_tickers: validTickers.map(t => t.ticker),\n  failed_tickers: invalidTickers.map(t => ({ ticker: t.ticker, error: t.error, reason: t.source }))\n};\n\nconsole.log('🎯 Processing Summary:', summary);\nconsole.log('✅ Valid tickers:', summary.successful_tickers.join(', '));\nif (summary.failed_tickers.length > 0) {\n  console.log('❌ Invalid/Failed tickers:', summary.failed_tickers.map(f => `${f.ticker} (${f.reason}: ${f.error})`).join(', '));\n}\n\n// Return summary and ONLY valid ticker data\nreturn [\n  { json: { type: 'processing_summary', ...summary } },\n  ...validTickers.map(ticker => ({ json: { type: 'ticker_data', ...ticker } }))\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        2192
      ],
      "id": "d8367115-3926-48c8-95bb-f3444029f54e",
      "name": "Final Results1"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2912,
        2336
      ],
      "id": "2ad742f9-88be-4528-839a-582a506c0911",
      "name": "Rate Limit Delay",
      "webhookId": "6e41319b-5ffa-4536-8a3e-7c26f79bf309"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 673174229,
          "mode": "list",
          "cachedResultName": "analysis_results",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit#gid=673174229"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sentiment_score",
              "displayName": "sentiment_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "analysis",
              "displayName": "analysis",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ticker",
              "displayName": "ticker",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -2224,
        2624
      ],
      "id": "0d9006a6-b6ba-45af-86ab-2682ec4a9e77",
      "name": "Append Chart Analysis1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the Gemini analysis output\nconst data = items[0].json;\nconst ticker = $('Format Ticker1').item.json.ticker;\nconst sentiment_score = $('Format Ticker1').item.json.sentiment_score;\nconst source = $('Format Ticker1').item.json.source;\nconst date = $('Format Ticker1').item.json.date;\n\n// Check if analysis failed\nif (data.error || !data.candidates?.[0]?.content?.parts?.[0]?.text) {\n  console.log(`Analysis failed for ticker ${ticker}: ${data.error || 'No analysis content'}`);\n  \n  return [{\n    json: {\n      timestamp: new Date().toISOString(),\n      date: date,\n      sentiment_score: sentiment_score,\n      analysis: `Analysis failed for ${ticker}. Error: ${data.error || 'Unable to analyze chart'}.`,\n      ticker: ticker,\n      status: 'error'\n    }\n  }];\n}\n\n// Extract the analysis text from Gemini response\nconst analysis = data.candidates[0].content.parts[0].text;\n\nreturn [\n  {\n    json: {\n      timestamp: new Date().toISOString(),\n      date: date,\n      sentiment_score: sentiment_score,\n      analysis: analysis,\n      ticker: ticker,\n      status: 'success'\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2416,
        2624
      ],
      "id": "a9de2675-f242-4e19-ab76-313b5e7ea16e",
      "name": "Format Analysis Output1"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-flash-latest",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-flash-latest"
        },
        "text": "# Role\n\nYou are an expert financial analyst specializing in technical analysis of stock charts. Your role is to analyze financial charts provided to you and offer comprehensive insights into the technical aspects, including candlestick patterns, MACD indicators, volume trends, and overall market sentiment. You must provide a detailed breakdown of the chart, highlighting key areas of interest and actionable insights.\n\nStock Ticker: {{$('Format Ticker').item.json.ticker}}\nSentiment Score: {{$('Format Ticker').item.json.sentiment_score}}\nNews Source: {{$('Format Ticker').item.json.source}}\nDate: {{$('Format Ticker').item.json.date}}\n\nWhen analyzing this stock chart, always include the following:\n\n1. **Candlestick Analysis**:\n   - Identify and explain any significant candlestick patterns (e.g., bullish engulfing, doji, hammer).\n   - Comment on the overall trend (bullish, bearish, or sideways).\n   - Highlight any breakout or pullback zones.\n\n2. **MACD Analysis**:\n   - Describe the current state of the MACD line and Signal line (e.g., bullish crossover, bearish crossover).\n   - Discuss the MACD histogram and its implications for momentum.\n   - Identify any divergences between the MACD and the price action.\n\n3. **Volume Analysis**:\n   - Highlight any significant changes in trading volume.\n   - Explain how volume supports or contradicts price movements.\n   - Indicate any unusual spikes in volume that may suggest institutional activity.\n\n4. **Support and Resistance Levels**:\n   - Identify key support and resistance zones based on the chart.\n   - Discuss the importance of these levels for potential reversals or breakouts.\n\n5. **Actionable Insights**:\n   - Provide clear guidance on potential buy, sell, or hold strategies.\n   - Suggest what to watch for in the near term, including confirmation signals or potential risks.\n   - Consider the sentiment score in your recommendation.\n\n6. **Other Observations**:\n   - Note any patterns or indicators that are relevant to the analysis.\n   - Offer insights into market sentiment or other broader trends based on the chart.\n\nBe clear, concise, and data-driven in your analysis. Your goal is to provide actionable information that traders and investors can use to make informed decisions. Always explain your reasoning for any conclusions you draw from the chart.",
        "inputType": "binary",
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -2576,
        2624
      ],
      "id": "3fdbea15-b97c-4ca3-962b-95e9dcb81aa7",
      "name": "Analyze image1",
      "credentials": {
        "googlePalmApi": {
          "id": "cPK0ezlgYDg88aZm",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2736,
        2624
      ],
      "id": "dd31c97e-37d6-4b01-a199-6854fef3c546",
      "name": "Wait1",
      "webhookId": "4357d28a-244c-48fb-9762-ad052c1307fd"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.chart-img.com/v2/tradingview/advanced-chart",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "9lf6Qqqtab7SqnbTP0aR79CBo7lqJh8R379rScwj"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n \"theme\": \"dark\",\n \"interval\": \"1W\",\n \"symbol\": \"{{$json.tradingViewSymbol}}\",\n \"override\": {\n \"showStudyLastValue\": false\n },\n \"studies\": [\n {\n \"name\": \"Volume\",\n \"forceOverlay\": true\n },\n {\n \"name\": \"MACD\",\n \"override\": {\n \"Signal.linewidth\": 2,\n \"Signal.color\": \"rgb(255,65,129)\"\n }\n }\n ]\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3024,
        2624
      ],
      "id": "7c5e3737-ff06-425b-a9da-a79a5a7561ae",
      "name": "Get Chart URL1"
    },
    {
      "parameters": {
        "jsCode": "// Clean Ticker Processing - Skip invalid tickers completely\nconsole.log('🔍 Processing ticker from row ' + ($json.row_number || 'unknown'));\n\n// Try to get ticker from incoming data\nlet ticker = $json.ticker && $json.ticker.trim() ? $json.ticker.trim() : null;\n\n// If ticker is empty, try extracting from source text\nif (!ticker && $json.source) {\n  // Look for common stock ticker patterns in the text\n  const knownTickers = ['AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'TSLA', 'META', 'NVDA', 'NFLX', 'AMD', 'JPM', 'JNJ', 'UNH', 'XOM', 'V', 'MA', 'BAC', 'WMT', 'PG', 'DIS', 'HD', 'KO', 'LLY', 'ABBV', 'PFE', 'MRK', 'TMO', 'ABT', 'CVX', 'COST', 'AVGO', 'ACN', 'NKE', 'DHR', 'TXN', 'NEE', 'BMY', 'QCOM', 'HON', 'UPS', 'LOW', 'PM', 'MDT', 'UNP', 'IBM', 'RTX', 'SBUX', 'CAT', 'GS', 'AXP', 'BA', 'MMM', 'GE', 'INTC'];\n  \n  // Check if any known ticker is mentioned in the source\n  for (let i = 0; i < knownTickers.length; i++) {\n    const knownTicker = knownTickers[i];\n    if ($json.source.toUpperCase().includes(knownTicker)) {\n      ticker = knownTicker;\n      console.log('📝 Found known ticker in source: ' + ticker);\n      break;\n    }\n  }\n  \n  // If no known ticker found, look for company names that might indicate a ticker\n  if (!ticker) {\n    const companyMap = {\n      'ELI LILLY': 'LLY',\n      'LILLY': 'LLY',\n      'APPLE': 'AAPL',\n      'MICROSOFT': 'MSFT',\n      'GOOGLE': 'GOOGL',\n      'AMAZON': 'AMZN',\n      'TESLA': 'TSLA',\n      'FACEBOOK': 'META',\n      'NVIDIA': 'NVDA',\n      'NETFLIX': 'NFLX',\n      'JP MORGAN': 'JPM',\n      'JPMORGAN': 'JPM',\n      'JOHNSON': 'JNJ'\n    };\n    \n    const sourceUpper = $json.source.toUpperCase();\n    for (const company in companyMap) {\n      if (sourceUpper.includes(company)) {\n        ticker = companyMap[company];\n        console.log('📝 Extracted ticker from company name: ' + company + ' -> ' + ticker);\n        break;\n      }\n    }\n  }\n}\n\n// SKIP COMPLETELY if no ticker found\nif (!ticker) {\n  console.log('❌ SKIPPED: No ticker found in row ' + ($json.row_number || 'unknown'));\n  return []; // Return empty array to skip this item completely\n}\n\n// Clean ticker\nlet cleanTicker = ticker.replace(/\\..*$/, '').toUpperCase().trim();\n\n// SKIP COMPLETELY if invalid ticker\nconst invalidTickers = ['N/A', 'NULL', 'UNKNOWN', 'TBD', 'PENDING', 'ERROR', 'CASH', 'USD', 'EUR', 'GBP', 'JPY', 'CEO', 'CFO', 'CTO', 'CIO', 'COO', 'THE', 'AND', 'FOR', 'INC', 'LLC', 'LTD', 'CORP', '', ' '];\nif (invalidTickers.includes(cleanTicker) || cleanTicker.length === 0 || cleanTicker.length > 5) {\n  console.log('❌ SKIPPED: Invalid ticker \"' + cleanTicker + '\" in row ' + ($json.row_number || 'unknown'));\n  return []; // Return empty array to skip this item completely\n}\n\n// Parse sentiment score - CONTINUE PROCESSING even if it's 0 or missing\nlet sentimentScore = parseFloat($json.sentiment_score);\nif (isNaN(sentimentScore)) {\n  console.log('⚠️ WARNING: Missing sentiment score for ' + cleanTicker + ', using 0 as default');\n  sentimentScore = 0; // Use 0 as default instead of skipping\n}\n\n// REMOVED: The check that skipped processing when sentiment score was exactly 0\n// Now we continue processing regardless of sentiment score value\nif (sentimentScore === 0) {\n  console.log('⚠️ NOTE: Sentiment score is 0 for ' + cleanTicker + ' - continuing with analysis anyway');\n}\n\nconsole.log('✅ VALID: Processing ' + cleanTicker + ' with sentiment ' + sentimentScore);\n\n// Determine exchange for valid tickers only\nconst tradingViewExchangeMap = {\n  'AAPL': 'NASDAQ', 'MSFT': 'NASDAQ', 'GOOGL': 'NASDAQ', 'GOOG': 'NASDAQ', 'AMZN': 'NASDAQ', \n  'TSLA': 'NASDAQ', 'META': 'NASDAQ', 'NVDA': 'NASDAQ', 'NFLX': 'NASDAQ', 'AMD': 'NASDAQ',\n  'JPM': 'NYSE', 'JNJ': 'NYSE', 'UNH': 'NYSE', 'XOM': 'NYSE', 'V': 'NYSE', 'MA': 'NYSE',\n  'BAC': 'NYSE', 'WMT': 'NYSE', 'PG': 'NYSE', 'DIS': 'NYSE', 'HD': 'NYSE', 'KO': 'NYSE'\n};\n\nlet selectedExchange = tradingViewExchangeMap[cleanTicker] || (cleanTicker.length <= 3 ? 'NYSE' : 'NASDAQ');\n\n// Format for TradingView\nconst tradingViewSymbol = selectedExchange + ':' + cleanTicker;\n\nconsole.log('📊 Final result: ' + tradingViewSymbol + ' (sentiment: ' + sentimentScore + ')');\n\n// Return only valid, complete data\nreturn [{\n  json: {\n    ticker: cleanTicker,\n    fullTicker: tradingViewSymbol,\n    tradingViewSymbol: tradingViewSymbol,\n    exchange: selectedExchange,\n    date: $json.date || null,\n    source: $json.source || null,\n    sentiment_score: sentimentScore,\n    row_number: $json.row_number || null,\n    isValid: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3168,
        2624
      ],
      "id": "e8064a0d-611a-4d08-986b-1ccc15aebd44",
      "name": "Format Ticker1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "sentiment_data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit#gid=0"
        },
        "options": {
          "outputFormatting": {
            "values": {
              "general": "FORMULA",
              "date": "FORMATTED_STRING"
            }
          }
        }
      },
      "id": "5ac7cc5c-05f7-4c2e-b329-74aba7387339",
      "name": "read_sentiments_score_today",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -3504,
        2624
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3328,
        2624
      ],
      "id": "56fe9737-fe93-46df-8ad2-bff85bb0d740",
      "name": "Loop Over Chart Analysis"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "id": "ec4dc13a-7208-437b-8e8f-0320bd7a05bf",
      "name": "Schedule Trigger - Afternoon",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3696,
        2624
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "// This node will only execute when the loop is completely finished\n// Check if this is the last item being processed\nconst loopData = $('Loop Over Chart Analysis');\nconst currentIndex = loopData.item?.json?.batchIndex || 0;\nconst totalItems = loopData.context?.totalItems || 0;\n\nconsole.log(`Processing item ${currentIndex + 1} of ${totalItems}`);\n\n// Pass through the data\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2048,
        2624
      ],
      "id": "1f4a5db7-b6f2-4328-b978-7985d77622bc",
      "name": "Check if Analysis Complete1"
    },
    {
      "parameters": {
        "jsCode": "// Check if the HTTP request was successful\nconst httpResponse = $input.all();\n\nif (!httpResponse || httpResponse.length === 0) {\n  console.log('No HTTP response received');\n  return [];\n}\n\nconst response = httpResponse[0];\n\n// Check for HTTP errors\nif (response.json?.error || !response.binary) {\n  console.log(`Chart API error for ticker ${$('Format Ticker1').item.json.ticker}: ${response.json?.error || 'No image data received'}`);\n  \n  // Try alternative exchanges\n  const ticker = $('Format Ticker1').item.json.ticker;\n  const currentExchange = $('Format Ticker1').item.json.fullTicker.split(':')[0];\n  \n  let nextExchange;\n  switch(currentExchange) {\n    case 'NASDAQ':\n      nextExchange = 'NYSE';\n      break;\n    case 'NYSE':\n      nextExchange = 'AMEX';\n      break;\n    default:\n      // Skip this ticker if all exchanges failed\n      console.log(`Skipping ticker ${ticker} - all exchanges failed`);\n      return [];\n  }\n  \n  // Return data for retry with different exchange\n  return [{\n    json: {\n      ...($('Format Ticker1').item.json),\n      fullTicker: `${nextExchange}:${ticker}`,\n      retryAttempt: true\n    }\n  }];\n}\n\n// Success - pass through the response\nreturn [response];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2880,
        2624
      ],
      "id": "1ee0bbea-3439-4923-86a6-a884a3012c4a",
      "name": "Handle Chart API Errors1"
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/positions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            }
          ]
        },
        "options": {}
      },
      "id": "83ead008-2ea2-4781-a68f-ebefbac36387",
      "name": "Alpaca-get-positions",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2864,
        2832
      ],
      "executeOnce": true,
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2640,
        2992
      ],
      "id": "6db26dee-df97-431e-9fe4-58a3810223e0",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "analysis_results",
          "mode": "name"
        },
        "clear": "specificRows",
        "startIndex": 2,
        "rowsToDelete": 100
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -1408,
        3008
      ],
      "id": "4e5dd6b3-e211-49ad-9919-f4de9b8fa224",
      "name": "Clear_analysis_results_sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "sentiment_data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit#gid=0"
        },
        "clear": "specificRows",
        "startIndex": 2,
        "rowsToDelete": 700
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -1408,
        2816
      ],
      "id": "8fb95c04-e51d-4654-96c4-50592fd64d08",
      "name": "Clear_sentiment_data_sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * @fileoverview A script to generate simplified trading signals from an array of\n * processed data items.\n *\n * This script is designed to process an array of stock data, including trading\n * recommendations and current position details. It determines whether to generate\n * an executable order (BUY or SELL) based on predefined logic and account\n * status. The code has been updated to include a buying power check to prevent\n * the 'insufficient qty' error and now also checks effective buying power.\n *\n * @param {Array<Object>} items The input array of data items. Each item is\n * an object containing details like ticker, trading recommendation, account\n * information, and current position data. The account data is assumed to be\n * the same across all items.\n * @returns {Array<Object>} An array of trading signal objects, with a format\n * suitable for direct use by the Alpaca API. Returns an empty array if no\n * executable signals are generated or if trading is blocked.\n */\n\n// Simplified Trading Signals - Output Only Alpaca Order Fields\nconst items = $input.all();\nconst tradingSignals = [];\nconst currentTime = new Date().toISOString();\n\nconsole.log(`🔍 Starting with ${items.length} processed data items`);\n\nif (items.length === 0) {\n  console.log(`❌ No input data received`);\n  return [];\n}\n\n// Extract account info from the first item (all items have same account data)\n// This assumes the data structure is consistent. It handles both direct JSON and wrapped JSON.\nconst sampleItem = items[0]?.json || items[0];\nconst buyingPower = parseFloat(sampleItem?.account_buying_power || 0);\nconst effectiveBuyingPower = parseFloat(sampleItem?.account_effective_buying_power || 0);\nconst tradingBlocked = sampleItem?.account_trading_blocked || false;\nconst accountBlocked = sampleItem?.account_blocked || false;\n\nconsole.log(`💰 Buying Power: $${buyingPower.toFixed(2)}`);\nconsole.log(`💰 Effective Buying Power: $${effectiveBuyingPower.toFixed(2)}`);\nconsole.log(`🚫 Trading Blocked: ${tradingBlocked}, Account Blocked: ${accountBlocked}`);\n\n// Early exit if trading is blocked on the account or effective buying power is 0\nif (tradingBlocked || accountBlocked) {\n  console.log(`🚫 Trading is blocked - no orders to generate`);\n  return [];\n}\n\nif (effectiveBuyingPower <= 0) {\n  console.log(`🚫 Effective buying power is $${effectiveBuyingPower.toFixed(2)} - no buy orders will be generated`);\n}\n\nlet executableSignals = 0;\n\n// Process each item in the input array\nfor (const item of items) {\n  // Handle both direct data and data nested under a 'json' key\n  const data = item.json || item;\n  \n  // Skip if the item is invalid or missing a ticker\n  if (!data || !data.ticker) {\n    console.log(`⚠️ Skipping invalid item (no ticker found)`);\n    continue;\n  }\n  \n  // Destructure and normalize key data points from the input item\n  const ticker = data.ticker.toUpperCase();\n  const sentimentScore = parseFloat(data.sentiment_score || 0);\n  const tradingRecommendation = data.trading_recommendation || 'HOLD';\n  const recommendedPositionSize = parseInt(data.recommended_position_size || 1);\n  const hasCurrentPosition = data.has_current_position || false;\n  const currentPositionQty = parseFloat(data.current_position_qty || 0);\n  const plPercentage = parseFloat(data.current_position_pl_percentage || 0);\n\n  // IMPORTANT: Assuming a 'current_price' field exists in the data.\n  // This is crucial for a buying power check.\n  const stockPrice = parseFloat(data.current_price || 0);\n  \n  console.log(`\\n📋 Processing: ${ticker} - Sentiment Score: ${sentimentScore.toFixed(2)}`);\n  console.log(`    Position: ${hasCurrentPosition ? `${currentPositionQty} shares (${plPercentage.toFixed(1)}% P/L)` : 'None'}`);\n  console.log(`    Current Price: $${stockPrice.toFixed(2)}`);\n  \n  let finalSide = null;\n  let finalQty = 0;\n  \n  // Determine executable orders based on the sentiment score\n  // A positive sentiment score indicates a potential BUY signal\n  if (sentimentScore > 0.2) {\n    // Check if effective buying power allows for buy orders\n    if (effectiveBuyingPower <= 0) {\n      console.log(`    ❌ Skipping BUY: Effective buying power is $${effectiveBuyingPower.toFixed(2)}`);\n    } else if (hasCurrentPosition && currentPositionQty < 0) {\n      // Positive sentiment on a SHORT position: This means cover the short.\n      finalSide = 'buy';\n      finalQty = Math.min(Math.abs(currentPositionQty), recommendedPositionSize, 50);\n      \n      // Before creating the order, perform a buying power check\n      const estimatedCost = finalQty * stockPrice;\n      if (effectiveBuyingPower < estimatedCost) {\n          console.log(`    ❌ Skipping BUY: Insufficient effective buying power ($${effectiveBuyingPower.toFixed(2)}) for estimated cost ($${estimatedCost.toFixed(2)})`);\n          finalSide = null; // Clear the signal\n          finalQty = 0;\n      } else {\n        console.log(`    🟢 BUY TO COVER: ${finalQty} shares of short position (positive sentiment)`);\n      }\n    } else if (hasCurrentPosition && currentPositionQty > 0) {\n      // Positive sentiment on an existing LONG position: Add to the position.\n      if (effectiveBuyingPower >= 500 && Math.abs(currentPositionQty) < 50) {\n        finalSide = 'buy';\n        finalQty = Math.min(recommendedPositionSize, 25);\n        \n        // Before creating the order, perform a buying power check\n        const estimatedCost = finalQty * stockPrice;\n        if (effectiveBuyingPower < estimatedCost) {\n            console.log(`    ❌ Skipping BUY: Insufficient effective buying power ($${effectiveBuyingPower.toFixed(2)}) for estimated cost ($${estimatedCost.toFixed(2)})`);\n            finalSide = null;\n            finalQty = 0;\n        } else {\n          console.log(`    🟢 ADD TO POSITION: ${finalQty} shares (positive sentiment)`);\n        }\n      } else {\n        console.log(`    ⏸️ NO ACTION: Conditions not met to add to position (Effective Buying Power: $${effectiveBuyingPower.toFixed(2)}, Current Qty: ${currentPositionQty})`);\n      }\n    } else if (!hasCurrentPosition && effectiveBuyingPower >= 500) {\n      // Positive sentiment with no existing position: Create a new LONG position.\n      finalSide = 'buy';\n      finalQty = Math.min(recommendedPositionSize, 35);\n      \n      // Before creating the order, perform a buying power check\n      const estimatedCost = finalQty * stockPrice;\n      if (effectiveBuyingPower < estimatedCost) {\n          console.log(`    ❌ Skipping BUY: Insufficient effective buying power ($${effectiveBuyingPower.toFixed(2)}) for estimated cost ($${estimatedCost.toFixed(2)})`);\n          finalSide = null;\n          finalQty = 0;\n      } else {\n        console.log(`    🟢 NEW BUY: ${finalQty} shares (positive sentiment)`);\n      }\n    }\n  } \n  // A negative sentiment score indicates a potential SELL signal\n  else if (sentimentScore < -0.2) {\n    if (hasCurrentPosition && currentPositionQty > 0) {\n      // Negative sentiment on an existing LONG position: Reduce or close the position.\n      finalSide = 'sell';\n      if (plPercentage > 15) {\n        finalQty = Math.min(Math.abs(currentPositionQty), Math.floor(Math.abs(currentPositionQty) * 0.5));\n      } else if (plPercentage < -15) {\n        finalQty = Math.min(Math.abs(currentPositionQty), Math.floor(Math.abs(currentPositionQty) * 0.75));\n      } else {\n        finalQty = Math.min(recommendedPositionSize, Math.abs(currentPositionQty), 40);\n      }\n      console.log(`    🔴 SELL: ${finalQty} shares from ${Math.abs(currentPositionQty)} position (negative sentiment)`);\n    } else {\n      console.log(`    ⏸️ NO ACTION: Cannot sell without a position`);\n    }\n  }\n  \n  // Only create a signal if a valid side and a positive quantity have been determined.\n  if (finalSide && finalQty > 0) {\n    const signal = {\n      symbol: ticker,\n      side: finalSide,\n      qty: finalQty,\n      type: 'market',\n      time_in_force: 'gtc'\n    };\n    \n    tradingSignals.push(signal);\n    executableSignals++;\n    \n    console.log(`    ✅ ORDER CREATED: ${ticker} ${finalSide.toUpperCase()} ${finalQty} shares`);\n  } else {\n    // No action is taken if the sentiment score is between -0.2 and 0.2\n    console.log(`    ⏸️ NO ORDER: ${ticker} - No executable action based on sentiment`);\n  }\n}\n\nconsole.log(`\\n=== SUMMARY ===`);\nconsole.log(`📊 Items processed: ${items.length}`);\nconsole.log(`✅ Executable orders: ${executableSignals}`);\nconsole.log(`💰 Buying Power: $${buyingPower.toFixed(2)}`);\nconsole.log(`💰 Effective Buying Power: $${effectiveBuyingPower.toFixed(2)}`);\n\nconsole.log(`\\n--- ORDERS FOR ALPACA ---`);\nif (executableSignals > 0) {\n  tradingSignals.forEach((signal, index) => {\n    console.log(`${index + 1}. ${signal.symbol}: ${signal.side.toUpperCase()} ${signal.qty} shares`);\n  });\n} else {\n  console.log(`No executable trades generated`);\n}\n\nreturn tradingSignals;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2224,
        3008
      ],
      "id": "8b028f60-1c66-4f16-b7f9-64acb308db7a",
      "name": "make_buy_sell_hold_short_orders1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://paper-api.alpaca.markets/v2/orders",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"symbol\": \"{{ $json.symbol }}\",\n  \"qty\": {{ $json.qty }},\n  \"side\": \"{{ $json.side }}\",\n  \"type\": \"{{ $json.type }}\",\n  \"time_in_force\": \"gtc\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1408,
        3200
      ],
      "id": "73aeca3a-1d45-4bee-a19c-527cabb13110",
      "name": "alpaca_place_order2",
      "credentials": {
        "httpCustomAuth": {
          "id": "4Z0AL8SMtJWXQETk",
          "name": "Custom Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Data Processing with Positions Data - CORRECTED FOR ACTUAL FORMAT\nconst mergedItems = $input.all();\nconsole.log('🔄 Received ' + mergedItems.length + ' merged items');\n\n// Extract data from merged items\nlet analysisItems = [];\nlet accountInfo = null;\nlet positionsData = [];\n\n// Process each merged item to extract the different data types\nfor (let i = 0; i < mergedItems.length; i++) {\n  const item = mergedItems[i];\n  const data = item.json || item;\n  \n  console.log('🔍 Processing merged item ' + (i + 1) + ':', typeof data);\n  \n  // Check if this is analysis data (has ticker and sentiment_score)\n  if (data && data.ticker && typeof data.sentiment_score !== 'undefined') {\n    analysisItems.push(item);\n    console.log('   📊 Found analysis data for: ' + data.ticker);\n  }\n  // Check if this is account data (has equity, buying_power, portfolio_value, etc.)\n  else if (data && (data.equity || data.buying_power || data.portfolio_value || data.account_number)) {\n    accountInfo = data;\n    console.log('   💰 Found account data - Equity: $' + (data.equity || 0) + ', Buying Power: $' + (data.buying_power || 0));\n  }\n  // Check if this is a single position (has symbol, qty, current_price, etc.)\n  else if (data && data.symbol && data.asset_id && (data.qty !== undefined || data.current_price !== undefined)) {\n    positionsData.push(data);\n    console.log('   📈 Found position data for: ' + data.symbol + ' (' + data.qty + ' shares)');\n  }\n  // Check if this is an array (could be positions array or analysis array)\n  else if (Array.isArray(data)) {\n    console.log('   📦 Found array with ' + data.length + ' items');\n    \n    // Check if it's an array of positions (each item has symbol, asset_id, qty)\n    if (data.length > 0 && data[0].symbol && data[0].asset_id) {\n      positionsData = positionsData.concat(data);\n      console.log('   📈 Found positions array with ' + data.length + ' positions');\n      // Log first few positions for debugging\n      for (let j = 0; j < Math.min(3, data.length); j++) {\n        console.log('      - ' + data[j].symbol + ': ' + data[j].qty + ' shares at $' + data[j].current_price);\n      }\n    }\n    // Check if it's an array of analysis items (each item has ticker, sentiment_score)\n    else if (data.length > 0 && data[0].ticker && typeof data[0].sentiment_score !== 'undefined') {\n      for (let j = 0; j < data.length; j++) {\n        analysisItems.push({ json: data[j] });\n      }\n      console.log('   📊 Found analysis array with ' + data.length + ' items');\n    }\n  }\n}\n\nconsole.log('📊 Data extraction summary:');\nconsole.log('   Analysis items: ' + analysisItems.length);\nconsole.log('   Account info: ' + (accountInfo ? 'Available' : 'Missing'));\nconsole.log('   Positions data: ' + positionsData.length + ' positions');\n\n// Validate we have the essential data\nif (!accountInfo) {\n  console.log('❌ ERROR: No account information found in merged data');\n  throw new Error('Account information not found in merged data');\n}\n\nif (analysisItems.length === 0) {\n  console.log('❌ ERROR: No analysis data found in merged items');\n  throw new Error('Analysis data not found in merged data');\n}\n\n// Process positions data with CORRECT format\nlet currentPositions = {};\nlet totalPositionsValue = 0;\nlet positionsCount = positionsData.length;\n\nconsole.log('📈 Processing ' + positionsCount + ' current positions:');\n\nfor (let i = 0; i < positionsData.length; i++) {\n  const position = positionsData[i];\n  const symbol = position.symbol;\n  const qty = parseFloat(position.qty || 0);\n  const qtyAvailable = parseFloat(position.qty_available || 0);\n  const marketValue = parseFloat(position.market_value || 0);\n  const unrealizedPL = parseFloat(position.unrealized_pl || 0);\n  const unrealizedPLPC = parseFloat(position.unrealized_plpc || 0);\n  const side = position.side || 'long';\n  const avgEntryPrice = parseFloat(position.avg_entry_price || 0);\n  const currentPrice = parseFloat(position.current_price || 0);\n  const costBasis = parseFloat(position.cost_basis || 0);\n  \n  // Calculate P/L percentage from the data\n  const plPercentage = unrealizedPLPC * 100; // Convert to percentage\n  \n  currentPositions[symbol] = {\n    symbol: symbol,\n    asset_id: position.asset_id,\n    exchange: position.exchange,\n    asset_class: position.asset_class,\n    qty: qty,\n    qty_available: qtyAvailable,\n    market_value: marketValue,\n    cost_basis: costBasis,\n    unrealized_pl: unrealizedPL,\n    unrealized_plpc: unrealizedPLPC,\n    side: side,\n    avg_entry_price: avgEntryPrice,\n    current_price: currentPrice,\n    pl_percentage: plPercentage,\n    lastday_price: parseFloat(position.lastday_price || 0),\n    change_today: parseFloat(position.change_today || 0)\n  };\n  \n  totalPositionsValue += Math.abs(marketValue);\n  \n  console.log('   ' + symbol + ': ' + qty + ' shares (' + qtyAvailable + ' available), $' + marketValue.toFixed(2) + ' value, P/L: $' + unrealizedPL.toFixed(2) + ' (' + plPercentage.toFixed(1) + '%) at $' + currentPrice.toFixed(2));\n}\n\nconsole.log('📊 Total positions: ' + positionsCount + ', Total value: $' + totalPositionsValue.toFixed(2));\n\n// Extract account metrics\nconst equity = parseFloat(accountInfo.equity || 0);\nconst portfolioValue = parseFloat(accountInfo.portfolio_value || 0);\nconst longMarketValue = parseFloat(accountInfo.long_market_value || 0);\nconst shortMarketValue = parseFloat(accountInfo.short_market_value || 0);\nconst cash = parseFloat(accountInfo.cash || 0);\nconst buyingPowerFromAPI = parseFloat(accountInfo.buying_power || 0);\nconst optionsBuyingPower = parseFloat(accountInfo.options_buying_power || 0);\nconst regTBuyingPower = parseFloat(accountInfo.regt_buying_power || 0);\nconst daytradingBuyingPower = parseFloat(accountInfo.daytrading_buying_power || 0);\nconst effectiveBuyingPower = parseFloat(accountInfo.effective_buying_power || 0);\nconst tradingBlocked = accountInfo.trading_blocked || false;\nconst accountBlocked = accountInfo.account_blocked || false;\nconst patternDayTrader = accountInfo.pattern_day_trader || false;\nconst multiplier = parseFloat(accountInfo.multiplier || 1);\nconst initialMargin = parseFloat(accountInfo.initial_margin || 0);\nconst maintenanceMargin = parseFloat(accountInfo.maintenance_margin || 0);\nconst sma = parseFloat(accountInfo.sma || 0);\nconst daytradingCount = parseInt(accountInfo.daytrade_count || 0);\n\n// Determine best buying power to use\nlet buyingPower = 0;\nlet buyingPowerSource = 'none';\n\nif (effectiveBuyingPower > 0) {\n  buyingPower = effectiveBuyingPower;\n  buyingPowerSource = 'effective_buying_power';\n} else if (buyingPowerFromAPI > 0) {\n  buyingPower = buyingPowerFromAPI;\n  buyingPowerSource = 'api_buying_power';\n} else if (regTBuyingPower > 0) {\n  buyingPower = regTBuyingPower;\n  buyingPowerSource = 'regt_buying_power';\n} else if (daytradingBuyingPower > 0) {\n  buyingPower = daytradingBuyingPower;\n  buyingPowerSource = 'daytrading_buying_power';\n} else if (optionsBuyingPower > 0) {\n  buyingPower = optionsBuyingPower * 0.5;\n  buyingPowerSource = 'options_buying_power_conservative';\n} else if (cash > 0) {\n  buyingPower = cash;\n  buyingPowerSource = 'cash';\n} else if (equity > initialMargin) {\n  buyingPower = (equity - initialMargin) * 0.5;\n  buyingPowerSource = 'equity_conservative';\n}\n\nconsole.log('💰 Account Summary:');\nconsole.log('   Account Number: ' + (accountInfo.account_number || 'N/A'));\nconsole.log('   Equity: $' + equity.toFixed(2));\nconsole.log('   Portfolio Value: $' + portfolioValue.toFixed(2));\nconsole.log('   Cash: $' + cash.toFixed(2));\nconsole.log('   API Buying Power: $' + buyingPowerFromAPI.toFixed(2));\nconsole.log('   Effective Buying Power: $' + effectiveBuyingPower.toFixed(2));\nconsole.log('   RegT Buying Power: $' + regTBuyingPower.toFixed(2));\nconsole.log('   Daytrading Buying Power: $' + daytradingBuyingPower.toFixed(2));\nconsole.log('   Options Buying Power: $' + optionsBuyingPower.toFixed(2));\nconsole.log('   FINAL Buying Power: $' + buyingPower.toFixed(2) + ' (source: ' + buyingPowerSource + ')');\nconsole.log('   Long Positions: $' + longMarketValue.toFixed(2));\nconsole.log('   Short Positions: $' + shortMarketValue.toFixed(2));\nconsole.log('   Current Positions Count: ' + positionsCount);\nconsole.log('   Trading Blocked: ' + tradingBlocked);\nconsole.log('   Account Blocked: ' + accountBlocked);\n\n// Determine trading mode\nconst sellOnlyMode = buyingPower < 500;\nconsole.log('🎯 Trading Mode: ' + (sellOnlyMode ? 'SELL-ONLY' : 'NORMAL') + ' (Buying Power: $' + buyingPower.toFixed(2) + ')');\n\n// Process analysis results\nconst cleanedData = [];\n\nfor (let index = 0; index < analysisItems.length; index++) {\n  const item = analysisItems[index];\n  const data = item.json || item;\n  \n  if (data && data.ticker) {\n    console.log('📋 Processing item ' + (index + 1) + ': ' + data.ticker);\n    \n    const sentimentScore = parseFloat(data.sentiment_score || 0);\n    const currentPosition = currentPositions[data.ticker] || null;\n    \n    // Enhanced position analysis using CORRECT format\n    let hasPosition = currentPosition !== null;\n    let currentQty = hasPosition ? currentPosition.qty : 0;\n    let currentQtyAvailable = hasPosition ? currentPosition.qty_available : 0;\n    let currentValue = hasPosition ? currentPosition.market_value : 0;\n    let unrealizedPL = hasPosition ? currentPosition.unrealized_pl : 0;\n    let plPercentage = hasPosition ? currentPosition.pl_percentage : 0;\n    let positionSide = hasPosition ? currentPosition.side : null;\n    let stockPrice = hasPosition ? currentPosition.current_price : 0;\n    let avgEntryPrice = hasPosition ? currentPosition.avg_entry_price : 0;\n    \n    console.log('   Current position: ' + (hasPosition ? currentQty + ' shares (' + currentQtyAvailable + ' available), $' + currentValue.toFixed(2) + ' (' + plPercentage.toFixed(1) + '% P/L)' : 'None'));\n    console.log('   Stock price: $' + stockPrice.toFixed(2));\n    \n    // Determine trading recommendation\n    let tradingRecommendation = 'HOLD';\n    let recommendedPositionSize = 0;\n    let maxPositionSize = 0;\n    \n    if (sellOnlyMode) {\n      // SELL-ONLY MODE: Focus on existing positions\n      if (hasPosition && currentQtyAvailable > 0) {\n        if (sentimentScore >= 0.4 && plPercentage > 5) {\n          tradingRecommendation = 'SELL';\n          recommendedPositionSize = Math.min(currentQtyAvailable, Math.floor(currentQtyAvailable * 0.5));\n        } else if (sentimentScore < -0.2 && plPercentage < -10) {\n          tradingRecommendation = 'SELL';\n          recommendedPositionSize = Math.min(currentQtyAvailable, Math.floor(currentQtyAvailable * 0.75));\n        } else if (sentimentScore < 0.0 && plPercentage < -5) {\n          tradingRecommendation = 'SELL';\n          recommendedPositionSize = Math.min(currentQtyAvailable, Math.floor(currentQtyAvailable * 0.25));\n        }\n      }\n      maxPositionSize = recommendedPositionSize;\n    } else {\n      // NORMAL MODE\n      if (hasPosition) {\n        // Manage existing position\n        if (sentimentScore >= 0.6 && plPercentage > 2 && currentQty < 100) {\n          tradingRecommendation = 'BUY';\n          // Use actual stock price for calculation\n          if (stockPrice > 0) {\n            let maxAffordable = Math.floor((buyingPower * 0.1) / stockPrice);\n            recommendedPositionSize = Math.min(10, maxAffordable, 100 - currentQty);\n          } else {\n            recommendedPositionSize = Math.min(10, 100 - currentQty);\n          }\n        } else if (sentimentScore >= 0.4 && plPercentage > 15) {\n          tradingRecommendation = 'SELL';\n          recommendedPositionSize = Math.min(currentQtyAvailable, Math.floor(currentQtyAvailable * 0.3));\n        } else if (sentimentScore < -0.3 && plPercentage < -15) {\n          tradingRecommendation = 'SELL';\n          recommendedPositionSize = Math.min(currentQtyAvailable, Math.floor(currentQtyAvailable * 0.8));\n        } else if (sentimentScore < 0.0 && plPercentage < -8) {\n          tradingRecommendation = 'SELL';\n          recommendedPositionSize = Math.min(currentQtyAvailable, Math.floor(currentQtyAvailable * 0.4));\n        }\n        maxPositionSize = recommendedPositionSize;\n      } else {\n        // No position - consider new entry\n        if (sentimentScore >= 0.5) {\n          tradingRecommendation = 'BUY';\n          \n          // Use conservative price estimate if no current price\n          if (stockPrice <= 0) {\n            if (buyingPower > 20000) {\n              stockPrice = 300;\n            } else if (buyingPower > 10000) {\n              stockPrice = 200;\n            } else if (buyingPower > 5000) {\n              stockPrice = 100;\n            } else {\n              stockPrice = 50;\n            }\n          }\n          \n          // Calculate affordable position size\n          let maxAffordable = Math.floor((buyingPower * 0.05) / stockPrice);\n          recommendedPositionSize = Math.max(1, Math.min(25, maxAffordable));\n          maxPositionSize = Math.max(1, Math.min(50, Math.floor((buyingPower * 0.1) / stockPrice)));\n          \n          // Safety check\n          if (buyingPower < stockPrice || recommendedPositionSize <= 0) {\n            tradingRecommendation = 'HOLD';\n            recommendedPositionSize = 0;\n            maxPositionSize = 0;\n          }\n        }\n      }\n    }\n    \n    // Determine confidence level\n    let confidenceLevel = 'LOW';\n    if (Math.abs(sentimentScore) >= 0.7) {\n      confidenceLevel = 'HIGH';\n    } else if (Math.abs(sentimentScore) >= 0.4) {\n      confidenceLevel = 'MEDIUM';\n    }\n    \n    const cleanedItem = {\n      // Essential trading data\n      ticker: data.ticker.toUpperCase(),\n      sentiment_score: sentimentScore,\n      date: data.date,\n      timestamp: data.timestamp,\n      status: data.status,\n      row_number: data.row_number,\n      \n      // Current price from position data\n      current_price: stockPrice,\n      \n      // Trading mode flags\n      sell_only_mode: sellOnlyMode,\n      trading_mode: sellOnlyMode ? 'SELL_ONLY' : 'NORMAL',\n      \n      // Trading recommendations\n      trading_recommendation: tradingRecommendation,\n      recommended_position_size: Math.max(0, recommendedPositionSize),\n      max_position_size: Math.max(0, maxPositionSize),\n      confidence_level: confidenceLevel,\n      \n      // Current position data (using correct format)\n      has_current_position: hasPosition,\n      current_position_qty: currentQty,\n      current_position_qty_available: currentQtyAvailable,\n      current_position_value: currentValue,\n      current_position_unrealized_pl: unrealizedPL,\n      current_position_pl_percentage: plPercentage,\n      current_position_side: positionSide,\n      current_position_avg_price: avgEntryPrice,\n      current_position_current_price: stockPrice,\n      \n      // Account context\n      account_equity: equity,\n      account_portfolio_value: portfolioValue,\n      account_cash: cash,\n      account_buying_power: buyingPower,\n      account_buying_power_source: buyingPowerSource,\n      account_buying_power_api: buyingPowerFromAPI,\n      account_effective_buying_power: effectiveBuyingPower,\n      account_options_buying_power: optionsBuyingPower,\n      account_long_positions: longMarketValue,\n      account_short_positions: shortMarketValue,\n      account_positions_count: positionsCount,\n      account_positions_total_value: totalPositionsValue,\n      account_trading_blocked: tradingBlocked,\n      account_blocked: accountBlocked,\n      account_pattern_day_trader: patternDayTrader,\n      account_daytrade_count: daytradingCount,\n      account_multiplier: multiplier,\n      \n      data_source: 'enhanced_analysis_with_positions'\n    };\n    \n    cleanedData.push(cleanedItem);\n    console.log('   ✅ ' + cleanedItem.ticker + ': ' + cleanedItem.trading_recommendation + ' ' + cleanedItem.recommended_position_size + ' shares' + (hasPosition ? ' (current: ' + currentQty + ', available: ' + currentQtyAvailable + ')' : ''));\n  }\n}\n\n// Account safety checks\nif (tradingBlocked || accountBlocked) {\n  console.log('🚫 ACCOUNT BLOCKED - Converting all to HOLD');\n  for (let i = 0; i < cleanedData.length; i++) {\n    cleanedData[i].trading_blocked = true;\n    cleanedData[i].block_reason = tradingBlocked ? 'trading_blocked' : 'account_blocked';\n    cleanedData[i].trading_recommendation = 'HOLD';\n    cleanedData[i].recommended_position_size = 0;\n  }\n}\n\n// Calculate summary statistics\nlet buyRecommendations = 0;\nlet sellRecommendations = 0;\nlet holdRecommendations = 0;\nlet positionBasedRecommendations = 0;\n\nfor (let i = 0; i < cleanedData.length; i++) {\n  const item = cleanedData[i];\n  if (item.trading_recommendation === 'BUY') {\n    buyRecommendations++;\n  } else if (item.trading_recommendation === 'SELL') {\n    sellRecommendations++;\n  } else {\n    holdRecommendations++;\n  }\n  \n  if (item.has_current_position) {\n    positionBasedRecommendations++;\n  }\n}\n\nconsole.log('=== ENHANCED SUMMARY ===');\nconsole.log('📊 Total items: ' + cleanedData.length);\nconsole.log('📈 Items with current positions: ' + positionBasedRecommendations);\nconsole.log('🎯 Trading Mode: ' + (sellOnlyMode ? 'SELL-ONLY' : 'NORMAL'));\nconsole.log('💰 Buying Power: $' + buyingPower.toFixed(2) + ' (source: ' + buyingPowerSource + ')');\nconsole.log('📈 Total Positions Value: $' + totalPositionsValue.toFixed(2));\nconsole.log('🟢 BUY recommendations: ' + buyRecommendations);\nconsole.log('🔴 SELL recommendations: ' + sellRecommendations);\nconsole.log('🟡 HOLD recommendations: ' + holdRecommendations);\n\nif (sellOnlyMode) {\n  console.log('⚠️ SELL-ONLY MODE ACTIVE: Only SELL orders will be generated due to insufficient buying power');\n}\n\n// Return cleaned data in n8n format\nconst results = [];\nfor (let i = 0; i < cleanedData.length; i++) {\n  results.push({ json: cleanedData[i] });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2432,
        3008
      ],
      "id": "ad359337-58b2-49df-8fca-f3c1c3208427",
      "name": "combine_data_sources1"
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/account",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            }
          ]
        },
        "options": {}
      },
      "id": "ae639a1c-32d3-4804-9a4e-75c2e82c2526",
      "name": "Alpaca-get-account-info2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2864,
        3008
      ],
      "executeOnce": true,
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA",
          "mode": "list",
          "cachedResultName": "Stock Trading Bot System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1j7hgekZfq8yv0eB_O4T3xh1rp5cJdS1G9PBJs9aMbXA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "analysis_results",
          "mode": "name"
        },
        "options": {}
      },
      "id": "b539b1b3-189c-4a39-87fd-8e39bd767856",
      "name": "read_analysis_results_today1",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -2864,
        3200
      ],
      "typeVersion": 4.6,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JpcRlM8U92CcZeJg",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 21,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "id": "84b6782b-3638-47c0-b433-0b9ab96736e3",
      "name": "After_Market_Close_Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3696,
        3008
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2016,
        3008
      ],
      "id": "256f5b9c-10a6-48d3-8b57-56b23e1c551c",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/positions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            }
          ]
        },
        "options": {}
      },
      "id": "2219ed89-8785-4cdd-8e12-e8055d20efc5",
      "name": "Get_Positions",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3616,
        3504
      ],
      "executeOnce": false,
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "Vus9IlCGBCZLJ4b6",
          "name": "Header Auth account"
        },
        "httpCustomAuth": {
          "id": "4Z0AL8SMtJWXQETk",
          "name": "Custom Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/account",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            }
          ]
        },
        "options": {}
      },
      "id": "ba202756-0a39-4b9a-beee-26f3bfca9458",
      "name": "Get_Account_Info",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3616,
        3664
      ],
      "executeOnce": false,
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "Vus9IlCGBCZLJ4b6",
          "name": "Header Auth account"
        },
        "httpCustomAuth": {
          "id": "4Z0AL8SMtJWXQETk",
          "name": "Custom Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/orders",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            }
          ]
        },
        "options": {}
      },
      "id": "6dd61173-b611-4bdb-bd9d-e545513cc84a",
      "name": "Get_Orders",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -3616,
        3824
      ],
      "executeOnce": false,
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "Vus9IlCGBCZLJ4b6",
          "name": "Header Auth account"
        },
        "httpCustomAuth": {
          "id": "4Z0AL8SMtJWXQETk",
          "name": "Custom Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3424,
        3648
      ],
      "id": "c84072b7-fef0-45a5-b848-2c7a3a57c56f",
      "name": "Merge_Data"
    },
    {
      "parameters": {
        "jsCode": "// Alpaca Orders Formatter - Convert existing orders to valid Alpaca format\nconst ordersData = $input.first().json;\nconst account = $input.all()[1] ? $input.all()[1].json : {};\nconst additionalData = $input.all()[2] ? $input.all()[2].json : {};\n\nlet validAlpacaOrders = [];\n\n// Helper function to validate and format quantity\nfunction formatQuantity(qty) {\n  const num = Math.abs(parseFloat(qty));\n  if (isNaN(num) || num <= 0) return null;\n  \n  // Alpaca requires integer quantities for shares\n  return Math.floor(num).toString();\n}\n\n// Helper function to validate symbol\nfunction isValidSymbol(symbol) {\n  return symbol && typeof symbol === 'string' && symbol.trim().length > 0;\n}\n\n// Helper function to map order types\nfunction mapOrderType(orderType) {\n  const type = (orderType || '').toLowerCase();\n  switch (type) {\n    case 'market':\n      return 'market';\n    case 'limit':\n      return 'limit';\n    case 'stop':\n      return 'stop';\n    case 'stop_limit':\n      return 'stop_limit';\n    default:\n      return 'market'; // Default to market order\n  }\n}\n\n// Helper function to map time in force\nfunction mapTimeInForce(tif) {\n  const timeInForce = (tif || '').toLowerCase();\n  switch (timeInForce) {\n    case 'day':\n      return 'day';\n    case 'gtc':\n      return 'gtc';\n    case 'ioc':\n      return 'ioc';\n    case 'fok':\n      return 'fok';\n    default:\n      return 'gtc'; // Default to GTC\n  }\n}\n\n// Process each order from the input\nif (ordersData && Array.isArray(ordersData)) {\n  ordersData.forEach((order, index) => {\n    try {\n      // Extract order details\n      const symbol = order.symbol ? order.symbol.trim().toUpperCase() : '';\n      const qty = order.qty;\n      const side = (order.side || '').toLowerCase();\n      const orderType = order.order_type || order.type;\n      const timeInForce = order.time_in_force;\n      const status = (order.status || '').toLowerCase();\n      const limitPrice = order.limit_price;\n      const stopPrice = order.stop_price;\n      \n      // Skip orders that are already filled, cancelled, or rejected\n      if (['filled', 'cancelled', 'rejected', 'expired'].includes(status)) {\n        console.log(`⏭️ Skipping ${symbol}: Order already ${status}`);\n        return;\n      }\n      \n      // Validate required fields\n      if (!isValidSymbol(symbol)) {\n        console.log(`❌ Invalid symbol for order ${index + 1}: ${symbol}`);\n        return;\n      }\n      \n      const formattedQty = formatQuantity(qty);\n      if (!formattedQty) {\n        console.log(`❌ Invalid quantity for ${symbol}: ${qty}`);\n        return;\n      }\n      \n      if (!['buy', 'sell'].includes(side)) {\n        console.log(`❌ Invalid side for ${symbol}: ${side}`);\n        return;\n      }\n      \n      // Build the Alpaca order\n      const alpacaOrder = {\n        symbol: symbol,\n        qty: formattedQty,\n        side: side,\n        type: mapOrderType(orderType),\n        time_in_force: mapTimeInForce(timeInForce)\n      };\n      \n      // Add limit price if it's a limit or stop_limit order\n      if ((alpacaOrder.type === 'limit' || alpacaOrder.type === 'stop_limit') && limitPrice) {\n        alpacaOrder.limit_price = parseFloat(limitPrice).toFixed(2);\n      }\n      \n      // Add stop price if it's a stop or stop_limit order\n      if ((alpacaOrder.type === 'stop' || alpacaOrder.type === 'stop_limit') && stopPrice) {\n        alpacaOrder.stop_price = parseFloat(stopPrice).toFixed(2);\n      }\n      \n      // Validate the final order structure\n      if (alpacaOrder.symbol && alpacaOrder.qty && alpacaOrder.side && alpacaOrder.type && alpacaOrder.time_in_force) {\n        validAlpacaOrders.push({\n          // Core Alpaca order fields\n          ...alpacaOrder,\n          \n          // Additional tracking info (for logging only)\n          original_order_id: order.id,\n          original_status: status,\n          asset_class: order.asset_class,\n          position_intent: order.position_intent,\n          timestamp: new Date().toISOString()\n        });\n      } else {\n        console.log(`❌ Incomplete order format for ${symbol}:`, alpacaOrder);\n      }\n      \n    } catch (error) {\n      console.log(`❌ Error processing order ${index + 1}: ${error.message}`);\n    }\n  });\n}\n\n// Log all order processing results\nconsole.log(`=== ALPACA ORDER FORMATTER ===`);\nconsole.log(`Account Buying Power: ${account?.buying_power || 'N/A'}`);\nconsole.log(`Input Orders: ${ordersData ? ordersData.length : 0}`);\nconsole.log(`Valid Orders to Execute: ${validAlpacaOrders.length}`);\n\nvalidAlpacaOrders.forEach((order, index) => {\n  console.log(`\\n${index + 1}. ${order.symbol}:`);\n  console.log(`   Action: ${order.side.toUpperCase()} ${order.qty} shares`);\n  console.log(`   Type: ${order.type.toUpperCase()}`);\n  console.log(`   Time in Force: ${order.time_in_force.toUpperCase()}`);\n  if (order.limit_price) console.log(`   Limit Price: ${order.limit_price}`);\n  if (order.stop_price) console.log(`   Stop Price: ${order.stop_price}`);\n  console.log(`   Original Status: ${order.original_status}`);\n  console.log(`   Alpaca Format: ${JSON.stringify({\n    symbol: order.symbol,\n    qty: order.qty,\n    side: order.side,\n    type: order.type,\n    time_in_force: order.time_in_force,\n    ...(order.limit_price && { limit_price: order.limit_price }),\n    ...(order.stop_price && { stop_price: order.stop_price })\n  })}`);\n});\n\n// Return properly formatted orders for Alpaca API\nif (validAlpacaOrders.length === 0) {\n  console.log('\\n✅ No valid orders to execute at this time.');\n  return [];\n}\n\nconsole.log(`\\n🚀 Processing ${validAlpacaOrders.length} valid order(s)...`);\n\n// Return orders in the exact format n8n expects for Alpaca API\nreturn validAlpacaOrders.map(order => ({ \n  json: {\n    // Core Alpaca API fields (required)\n    symbol: order.symbol,\n    qty: order.qty,\n    side: order.side,\n    type: order.type,\n    time_in_force: order.time_in_force,\n    \n    // Optional price fields (only if present)\n    ...(order.limit_price && { limit_price: order.limit_price }),\n    ...(order.stop_price && { stop_price: order.stop_price }),\n    \n    // Optional: include tracking info for debugging\n    original_order_id: order.original_order_id\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3312,
        3664
      ],
      "id": "41cabd10-aaf4-4ef5-abda-4c7d7ef222e9",
      "name": "Trading_Strategy"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition-check",
              "leftValue": "={{ $json.symbol }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -3200,
        3664
      ],
      "id": "c65bab07-dc64-4ddd-97bb-8495a12a2a17",
      "name": "Filter_Valid_Orders"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2976,
        3664
      ],
      "id": "e3c57bef-e693-4d79-9989-9065f2299493",
      "name": "Process_Orders_Sequentially"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://paper-api.alpaca.markets/v2/orders",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "PKQRNJSYJHY18K8XA7RM"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "uHslgNK6X0Q97OuHAfWRoqlN0tw03rz2ov8MRdkb"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"symbol\": \"{{ $json.symbol }}\",\n  \"qty\": \"{{ $json.qty }}\",\n  \"side\": \"{{ $json.side }}\",\n  \"type\": \"{{ $json.type }}\",\n  \"time_in_force\": \"{{ $json.time_in_force }}\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2768,
        3664
      ],
      "id": "20f93897-6529-4588-94b3-446797252f32",
      "name": "Place_Order",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Vus9IlCGBCZLJ4b6",
          "name": "Header Auth account"
        },
        "httpCustomAuth": {
          "id": "4Z0AL8SMtJWXQETk",
          "name": "Custom Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "log-entry",
              "name": "log_entry",
              "value": "=Order {{ $json.side }} {{ $json.qty }} {{ $json.symbol }} placed successfully",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        3664
      ],
      "id": "40684698-9589-44ac-a2db-e45df2104c8a",
      "name": "Log_Success"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-log",
              "name": "error_log",
              "value": "=Failed to place order for {{ $json.symbol }}: {{ $json.error }}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2560,
        3808
      ],
      "id": "b03d2d3a-9587-4963-b01e-4c3c878ca580",
      "name": "Log_Error"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 21,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "id": "30402f28-cb2f-4beb-9517-864bc39dd84c",
      "name": "After_Market_Close_Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -3888,
        3664
      ],
      "typeVersion": 1.2
    }
  ],
  "pinData": {},
  "connections": {
    "Filter Excluded Tickers": {
      "main": [
        [
          {
            "node": "Get articles from Finnhub1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Write_in_google_sheets_invalid_ticker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "loop_over_tickers": {
      "main": [
        [],
        [
          {
            "node": "Filter Excluded Tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If_ticker_not_valid": {
      "main": [
        [
          {
            "node": "Write_in_google_sheets_invalid_ticker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "join_articles_into_1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write_in_google_sheets_invalid_ticker": {
      "main": [
        [
          {
            "node": "loop_over_tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "join_articles_into_1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "format_output_as_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "format_output_as_json": {
      "main": [
        [
          {
            "node": "if_format_succesful",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if_format_succesful": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "write_sentiment_to_sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "write_sentiment_to_sheets": {
      "main": [
        [
          {
            "node": "loop_over_tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get articles from Finnhub1": {
      "main": [
        [
          {
            "node": "If_ticker_not_valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger - Morning": {
      "main": [
        [
          {
            "node": "Generate Ticker List1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Ticker List1": {
      "main": [
        [
          {
            "node": "Split Into Individual Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Individual Items1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Final Results1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Rate Limit Delay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Single Ticker1": {
      "main": [
        [
          {
            "node": "Process Single Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Single Response1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Delay": {
      "main": [
        [
          {
            "node": "Fetch Single Ticker1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Results1": {
      "main": [
        [
          {
            "node": "loop_over_tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Analysis Output1": {
      "main": [
        [
          {
            "node": "Append Chart Analysis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image1": {
      "main": [
        [
          {
            "node": "Format Analysis Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Analyze image1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chart URL1": {
      "main": [
        [
          {
            "node": "Handle Chart API Errors1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Ticker1": {
      "main": [
        [
          {
            "node": "Get Chart URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Chart Analysis1": {
      "main": [
        [
          {
            "node": "Check if Analysis Complete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "read_sentiments_score_today": {
      "main": [
        [
          {
            "node": "Loop Over Chart Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Chart Analysis": {
      "main": [
        [],
        [
          {
            "node": "Format Ticker1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger - Afternoon": {
      "main": [
        [
          {
            "node": "read_sentiments_score_today",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Analysis Complete1": {
      "main": [
        [
          {
            "node": "Loop Over Chart Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Chart API Errors1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alpaca-get-positions": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "combine_data_sources1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "make_buy_sell_hold_short_orders1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "alpaca_place_order2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "combine_data_sources1": {
      "main": [
        [
          {
            "node": "make_buy_sell_hold_short_orders1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alpaca-get-account-info2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "read_analysis_results_today1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "After_Market_Close_Trigger": {
      "main": [
        [
          {
            "node": "Alpaca-get-positions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Alpaca-get-account-info2",
            "type": "main",
            "index": 0
          },
          {
            "node": "read_analysis_results_today1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear_sentiment_data_sheet1": {
      "main": [
        []
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Clear_analysis_results_sheet1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Clear_sentiment_data_sheet1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "alpaca_place_order2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_Positions": {
      "main": [
        [
          {
            "node": "Merge_Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_Account_Info": {
      "main": [
        [
          {
            "node": "Merge_Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get_Orders": {
      "main": [
        [
          {
            "node": "Merge_Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge_Data": {
      "main": [
        [
          {
            "node": "Trading_Strategy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trading_Strategy": {
      "main": [
        [
          {
            "node": "Filter_Valid_Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter_Valid_Orders": {
      "main": [
        [],
        [
          {
            "node": "Process_Orders_Sequentially",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process_Orders_Sequentially": {
      "main": [
        [],
        [
          {
            "node": "Place_Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Place_Order": {
      "main": [
        [
          {
            "node": "Log_Success",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log_Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "Process_Orders_Sequentially",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "After_Market_Close_Trigger1": {
      "main": [
        [
          {
            "node": "Get_Positions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get_Account_Info",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get_Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "536ec43b-1b97-453d-b77f-eebc95440b71",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70053893f98ae11792bafd91fe163a8b52343258bade27a37a37aa203fb93bbf"
  },
  "id": "lhDatNoh3PnppZpX",
  "tags": []
}